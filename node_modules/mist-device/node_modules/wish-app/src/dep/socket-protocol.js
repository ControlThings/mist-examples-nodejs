var EventEmitter = require('events').EventEmitter;
var util = require('util');
var debug = require('debug')('SocketProtocol');

var socketProtocolCounter = 0;

function SocketProtocol(sock, label) {
    var self = this;
    this.sock = sock;
    this.write = sock.write.bind(sock);
    this.expectBytes = false;
    this.expectCallback = null;
    this.label = label;
    var cntIn = 0;
    var sid = ++socketProtocolCounter;

    this.readable = function() {
        //console.log("Reported readable...", sid, label);

        var chunk;
        if (self.expectBytes) {
            while (null !== (chunk = self.sock.read(self.expectBytes))) {
                cntIn += chunk.length;
                //console.log('got %d bytes of data', chunk.length, chunk, cntIn);

                if (self.expectCallback) {
                    self.expectCallback(null, chunk);
                } else {
                    debug("Nothing expected, but got some data... waiting... data is lost");
                    self.sock.removeListener('readable', self.readable);
                }
            }
        } else {
            debug("Nothing expected, but got some data... waiting for next readable?!");
        }
    };

    sock.on('readable', this.readable);
    
    sock.on('error', function(err) {
        if ( typeof self.expectCallback === 'function' ) {
            self.expectCallback(err);
        }
    });
    
    sock.on('connect', function() { self.emit('connect', arguments); });
}

util.inherits(SocketProtocol, EventEmitter);

SocketProtocol.prototype.expect = function(bytes, callback) {
    this.expectBytes = bytes;
    this.expectCallback = callback;
};

SocketProtocol.prototype.kick = function() {
};

SocketProtocol.prototype.bytes = function() {
    return this.cur;
};

SocketProtocol.prototype.drop = function() {
    //clearTimeout(this.timeout);
    if (this.sock) {
        this.sock.removeListener('readable', this.readable);
        //this.sock = null;
    }
    this.expectBytes = 0;
    this.expectCallback = null;
};

SocketProtocol.prototype.close = function() {
    //clearTimeout(this.timeout);
    if (this.sock) {
        //console.log("removing readable", this.readable);
        this.sock.removeListener('readable', this.readable);
        this.sock.end();
        //this.sock = null;
    }
    this.expectBytes = 0;
    this.expectCallback = null;
};

module.exports = {
    SocketProtocol: SocketProtocol };

