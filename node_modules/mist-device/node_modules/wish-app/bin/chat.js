/**
 * Minimalistic Chat for Wish
 * 
 * Run two clients with different WSIDs.
 *   WSID=chat1 node chat.js
 */

var App = require('./app.js').App;
var Protocol = require('./app.js').Protocol;

var chat = new Protocol('chat');

var white = '\u001b[37m';
var yellow = '\u001b[33m';
var green = '\u001b[34m';
var blue = '\u001b[32m';
var reset = '\u001b[39m';

chat.on('discovered', function(peer) {
    console.log("("+ peer.r +"@"+ peer.rhid +"/"+ peer.rsid +" discovered)");
    chat.allow(peer); // allow messages from this peer, starts triggering online/offline messages
    chat.deny(peer); // deny messages from this peer
});

chat.on('online', function(peer) {
    console.log(green + peer.r + reset +" entered, peer of "+peer.l+")");
});

chat.on('offline', function(peer) {
    console.log("("+ yellow + peer.r + reset +" left, was peer of "+peer.l+")");
});

chat.on('frame', function(data, peer) {
    var pattern = /\x1B\[([ABCD])/gm; // dump control characters
    console.log(green + peer.r +white+'>'+green+peer.l+reset+" says: ", blue + data.toString().replace(pattern, "") + reset);
});

process.stdin.setEncoding('utf8');

process.stdin.on('data', function(data) {
    var cmd = data.trim();
    if(cmd === '/peers') {
        for(var i in chat.peerCache) {
            var peer = chat.peerCache[i];
            console.log((peer.online?green:yellow)+ peer.l +white+(peer.online?green:yellow)+peer.r+reset, i);
        }
        return;
    }
    chat.broadcast(new Buffer(cmd));
});

//chat.publish(Alice, Bob); // triggers discovered in Bob's chat services with Bob>Alice@alice/chat1
//chat.publishAll(); // calls publish for all identities and all their contacts

var app = new App('Chat CLI', [chat], null, ['identity.list', 'services.listPeers']);

app.on('ready', function() {
    console.log("Chat is connected to core. WSID:", app.wsid);
});

