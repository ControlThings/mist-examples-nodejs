var UcpDevice = require('../src/index.js').UcpDevice;
var DummyInterface = require('./utils/ucp-interface.js').DummyInterface;
var DummyDevice = require('./utils/ucp-dummy-device.js').DummyDevice;
var debug = require('debug')('tests');
var assert = require('assert');
var UcpFeature = require('../src/index.js').UcpFeature;

var setup = {};

describe('ucp-device', function() {

    var dummyDevice = new DummyDevice();
    var ucp = new UcpDevice('TestDevice');

    var dimmer = new UcpFeature({
        type: 'uint16',
        label: 'Dimmer',
        unit: '%',
        scale: 0.1,
        data: 6,
        write: function(value, opts, cb) {
            // change dimmer value
            dummyDevice.write('dimmer', value);
            cb(null);
        }
    });
    
    var sha1 = new UcpFeature({
        type: 'uint16',
        label: 'Calculate SHA1 sum from string',
        invoke: function(args, opts, cb) {
            // work on something useful and return this string
            cb(null, require('crypto').createHash('sha1').update(args[0]).digest('hex'));
        }
    });
    
    var onOff = new UcpFeature({
        type: 'uint16',
        label: 'Switch',
        unit: 'on/off',
        data: 0,
        write: function(value, opts, cb) {
            // change dimmer value                
            dummyDevice.write('switch', value);
            cb(null);
        }
    });
    
    ucp.addFeature('dimmer', dimmer);
    ucp.addFeature('switch', onOff);
    ucp.addFeature('sha1', sha1);
 
    dummyDevice.on('change', function(feature, value) {
        if (feature === 'dimmer') {
            dimmer.deviceUpdate(value);
        } else if (feature === 'switch') {
            onOff.deviceUpdate(value);
        }
    });

    var interface = new DummyInterface();
    ucp.attachInterface(interface);

    var opts = {};

    it('should write to the device without error', function(done) {
        interface.write('dimmer', 77, function(err, data) {
            if (err) {
                debug('Write test returned error');
                throw new Error('Failed writing');
            } else {
                // write command successful
                debug('Write test returned without error');
                done();
            }
        });
    });

    it('should write to the device and get an error', function(done) {
        interface.write('non', 77, function(err, data) {
            if (err) {
                done();
            } else {
                // write command successful
                debug('Write test returned without error');
                throw new Error('Expecting error with non-existant feature on write.');
            }
        });
    });

    it('should invoke function', function(done) {
        interface.invoke('sha1', 'abcde', function(err, data) {
            if (err) {
                throw new Error('Expecting error with non-existant feature on write.');
            }
            
            // invoke command successful
            debug('Invoke test returned without error');
            done();
        });
    });

    it('should receive a model from the device', function(done) {
        interface.model(function(err, model) {
            if (err) {
                throw new Error('Failed getting model');
            } else {
                assert.equal(model.device, 'TestDevice');
                assert.equal(model.model.dimmer.type, 'uint16');
                assert.equal(model.model.sha1.invoke, true);
                done();
            }
        });
    });

    it('should get the value from a feature', function(done) {
        interface.read('switch', function(err, data) {
            if (err) {
                throw new Error('Read failed. ' + err.toString());
            } else {
                assert.strictEqual(data, 0);
                done();
            }
        });
    });

    it('should write and get a value', function(done) {
        interface.write('switch', 1, function(err, data) {
            if (err) {
                throw new Error('Read failed. ' + err.toString());
            } else {
                interface.read('switch', function(err, data) {
                    if (err) {
                        throw new Error('Read failed. ' + err.toString());
                    } else {
                        assert.strictEqual(data, 1);
                        done();
                    }
                });
            }
        });
    });
    it('should subscribe and get initial value and update', function(done) {
        var count = 0;
        
        interface.subscribe('dimmer', 'myendpoint??', function(err, data) {
            if (err) {
                throw new Error('subscribe failed. ' + err.toString());
            } else {
                if(count === 0) {
                    assert.strictEqual(data, 77);
                } else {
                    assert.strictEqual(data, 66);
                    done();
                }
                count++;
            }
        });
        interface.write('dimmer', 66, function(err, data) {
            if (err) {
                debug('Write test returned error');
                throw new Error('Failed writing');
            } else {
                // write command successful

            }
        });
 
        
    });

    xit('should create a new device', function(done) {
        var device = new UcpDevice('Lamp', {
            on: {
                type: 'slot',
                label: 'On'
            },
            off: {
                type: 'slot',
                label: 'Off'
            },
            type: { 
                type: 'enum', 
                map: { '0': 'Lamp', '1': 'Relay', '2': 'Switch' } }
        });
        device.model(function(err, model) {
            //console.log(model);
            
            done();
        });
    });
});