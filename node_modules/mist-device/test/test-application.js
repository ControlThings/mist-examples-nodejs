
var sdk = require('wish-sdk');
var debug = require('debug')('test-world');
var assert = require('assert');

var UcpApp = require('../src/index.js').UcpApp;
var UcpDevice = require('../src/index.js').UcpDevice;
var UcpFeature = require('../src/index.js').UcpFeature;
var UcpController = require('./utils/ucp-dummy-controller.js').UcpController;
var DummyDevice = require('./utils/ucp-dummy-device.js').DummyDevice;

var World = sdk.World;

var setup = {};
var controller;

describe('Mist node integration test', function () {

    var dimmer;
    var slider;
    var mappingKey = '';

    before(function (done) {
        this.timeout(5000);

        var configuration = {
            Alice: {hosts: [{apps: [UcpController]}]},
            Bob: {hosts: [{apps: [UcpApp]}]},
            Celine: {hosts: [{apps: [UcpApp]}]},
            David: {hosts: [{apps: [UcpApp]}]}
        };

        World.create(configuration, function (instance) {
            debug('Setup running.');
            
            setup = instance;
            //console.log("Setting setup:", setup);
            controller = setup.users['Alice'].hosts[0].apps[0];
            
            instance.befriendAll(function() {
                //console.log("firends forever!");
                instance.connectAll(function(){
                    //console.log("connected forever!");
                    dimmer = new Dimmer();
                    slider = new Slider();
                    instance.users['Bob'].hosts[0].apps[0].attachUcpDevice(dimmer.ucp);
                    instance.users['Celine'].hosts[0].apps[0].attachUcpDevice(slider.ucp);
                    done();
                });
            });
        });
    });

    it('should discover peer', function(done) {
        setTimeout(done, 1000);
    });

    it('should write a value', function (done) {
        controller.write(0, 'dimmer', 12, function(err, data) {
            done();
        });
    });
    it('should read a value', function (done) {
        controller.read(0, 'dimmer', function(err, data) {
            assert.equal(data, 12);
            done();
        });
    });

    it('should invoke a function', function (done) {
        controller.invoke(0, 'sha1', ['edcba'], function(err, data) {
            assert.equal(data, '7bef4d4a512d7797dce3a9fddfc0d65dadee1574');
            done();
        });
    });

    it('should subscribe and receive an update', function (done) {
        controller.subscribe(0, 'switch', function(err,data) {
            assert.equal(data, 1);
            done();
        });
        controller.write(0, 'switch', 1, function() {});
    });

    it('should receive a model from the device', function (done) {
        controller.model(0, function(err,data) {
            //console.log(data);
            assert.equal(data.device, 'TestDevice');
            assert.equal(data.model.dimmer.label, 'Dimmer');
            done();
        });
    });

   it('should map slider to dimmer', function(done) {
        var from = { 
            epid: 'dimmer', 
            opts: {
                type: 'direct',
                interval: 'change' // change (O-MI -1) / interval (O-MI positive integer) / on-connect (O-MI -2)
            }
        };
        var fromEpid = 'dimmer';
        var fromOpts = {type: 'direct', interval: 'change'};
        var toEpid = 'slider';
        var toOpts = {type: 'write'};
         
        var celine = setup.users['Celine'];
        var celineWuid = celine.wuid;
        var celineHost = celine.hosts[0].core.config.id;
        var celineService = celine.hosts[0].apps[0].app.config.wsid;
        
        var to = {
            ruid: celineWuid,
            rhid: celineHost,
            rsid: celineService,
            epid: 'slider',
            opts: {
                type: 'write'
            }
        };
        //to, 'control.requestMapping', [from, fromEpid, fromOpts, toEpid, toOpts]
        controller.requestMapping(0,to, toEpid, fromOpts, fromEpid, toOpts, function(err, data) {
            if (err) {
                debug('Write test returned error');
                throw new Error('Failed writing');
            }
            mappingKey = data;            
            done();
        });
    });  
    
    it('should send notifiction from slider to dimmer', function(done) {
        var value = 17;
        controller.write(1, 'slider', value, function (err, data) { 
            setTimeout(function(){
                controller.read(0, 'dimmer', function (err, data) {
                    //console.log("read res:", err, data);
                    assert.equal(data, value);
                    done();
                });
            }, 100);
        });
        
    });
    
    it('should drop mapping', function(done) {
        controller.unMap(1, mappingKey, 'slider', function (err, data) {
            done();
        });        
    });    
    
    xit('should make mapping and restart devices', function(done) {
        var from = { url: 'from-url', epid: 'dimmer' };
        var to = { url: 'to-url', epid: 'to-epid' };
        var opts = {
            type: 'direct',
            interval: 'change' // change (O-MI -1) / interval (O-MI positive integer) / on-connect (O-MI -2)
        };
        
        controller.map(0, from, to, opts, function(err, data) {
            if (err) {
                debug('Write test returned error');
                throw new Error('Failed writing');
            }
            
            var file = dimmer.ucp.serialize();
            var nd = new Dimmer();
            nd.ucp.deserialize(file);

            //console.log("Serialized loaded state:", nd.ucp.serialize());

            done();
});
    });    
});



function Dimmer() {
    var dummyDevice = new DummyDevice();
    this.ucp = new UcpDevice('TestDevice');

    var dimmer = new UcpFeature({
        type: 'uint16',
        label: 'Dimmer',
        unit: '%',
        scale: 0.1,
        data: 6,
        write: function(value, opts, cb) {
            // change dimmer value
            //console.log('dimmer write:', value)
            dummyDevice.write('dimmer', value);
            cb(null);
        }
    });

    var sha1 = new UcpFeature({
        type: 'uint16',
        label: 'Calculate SHA1 sum from string',
        invoke: function(args, opts, cb) {
            // work on something useful and return this string
            cb(null, require('crypto').createHash('sha1').update(args[0]).digest('hex'));
        }
    });

    var onOff = new UcpFeature({
        type: 'uint16',
        label: 'Switch',
        unit: 'on/off',
        data: 0,
        write: function (value, opts, cb) {
            // change dimmer value                
            dummyDevice.write('switch', value);
            cb(null);
        }
    });

    this.ucp.addFeature('dimmer', dimmer);
    this.ucp.addFeature('switch', onOff);
    this.ucp.addFeature('sha1', sha1);
    this.ucp.addFeature('test', new UcpFeature({type:'test', label:'Test'}));

    dummyDevice.on('change', function (feature, value) {
        if (feature === 'dimmer') {
            dimmer.deviceUpdate(value);
        } else if (feature === 'switch') {
            onOff.deviceUpdate(value);
        }
    });
    
    //this.interface = new DummyInterface();
    //this.ucp.attachInterface(this.interface);
}

function Slider() {
    var hwSim = new DummyDevice();
    this.ucp = new UcpDevice('SliderDevice');

    var slider = new UcpFeature({
        type: 'uint16',
        label: 'Slider',
        unit: '%',
        scale: 0.1,
        data: 0,
        write: function(value, opts, cb) {
            // change dimmer value
            hwSim.write('slider', value);
            cb(null);
        }
    });

    this.ucp.addFeature('slider', slider);

    hwSim.on('change', function (feature, value) {
        if (feature === 'slider') {
            slider.deviceUpdate(value);
        }
    });
    
    //this.interface = new DummyInterface();
    //this.ucp.attachInterface(this.interface);
}

