var Service = require('wish-app').Service;
var Protocol = require('wish-app').Protocol;
var debug = require('debug')('ucp-dummy-controller');

function UcpController(ws, uiport) {
    var self = this;
    this.peers = [];
 
    this.ucp = new Protocol('ucp', {
        _: {name: 'control'}
    });
    
    var descriptor = {
        name:'UCP Controller', 
        desc:'Universal Control Protocol control service', 
        wsid: 'ucpctrl-'+uiport,
        protocols: [this.ucp], 
        version: '0.1.0',
        core: {ws: 'ws://localhost:9090'}
    };
    
    if (ws) {
        descriptor.core.ws = ws; }
    
    this.app = new Service(descriptor);
    
 
    
    this.ucp.on('peers', function(data) {
        //console.log("Found peers in controller:", arguments);
        self.peers = data;
    });
    
    this.app.register({
        _:{name: 'util'},
        _run: { async: true },
        run: function() {
            console.log("Running in ucpapplication...");
        }
    });
}

UcpController.prototype.read = function(service, feature, cb) {
    var self = this;
    
    if ( self.peers[service] ) {
        var o = self.peers[service];
        var url = 'wish://'+ o.luid +">"+ o.ruid +"@"+ o.rhid +"/"+ o.rsid;
        self.ucp.rpc(o, 'control.read', [feature], function(err, data) {
            //console.log("A response was received from remote service...", data);
            cb(err, data);
        });
    } else {
        debug('Service index not found.', service, self.peers);
    }
    
};

UcpController.prototype.write = function(service, feature, value, cb) {
    var self = this;
    if ( self.peers[service] ) {
        var peer = self.peers[service];
        self.ucp.rpc(peer, 'control.write', [feature,value], function(err, data) {
            //res.send({data: 'too late, it already worked.',res: data});
            //console.log("WRITE response was received from remote service...", data);
            cb(err, data);
        });
    } else {
        debug('Service index not found.');
    }
    
};

UcpController.prototype.invoke = function(service, feature, args, cb) {
    var self = this;
    
    if ( self.peers[service] ) {
        var peer = self.peers[service];
        self.ucp.rpc(peer, 'control.invoke', [feature, args], function(err, data) {
            cb(err, data);
        });
    } else {
        debug('Service index not found.');
    }
    
};

UcpController.prototype.subscribe = function(service, feature, cb) {
    var self = this;
    
    if ( self.peers[service] ) {
        var peer = self.peers[service];
        self.ucp.rpc(peer, 'control.subscribe', [feature], function(err, data) {
            //res.send({data: 'too late, it already worked.',res: data});
            //console.log("SUBSCRIBE response was received from remote service...", data);
            cb(err, data);
        });
    } else {
        debug('Service index not found.');
    }
    
};

UcpController.prototype.map = function(service, from, to, opts, cb) {
    var self = this;
    
    if ( self.peers[service] ) {
        var peer = self.peers[service];
        console.log("Controller about to send a map message");
        self.ucp.rpc(peer, 'control.map', [from, to, opts], function(err, data) {
            //console.log("MAP response was received from remote service...", err, data);
            cb(err, data);
        });
    } else {
        debug('Service index not found.');
    }
    
};

UcpController.prototype.unMap = function(service, key, epid, cb) {
    var self = this;
    
    if ( self.peers[service] ) {
        var peer = self.peers[service];
        self.ucp.rpc(peer, 'control.unMap', [key, epid], function(err, data) {
            //console.log("MAP response was received from remote service...", err, data);
            cb(err, data);
        });
    } else {
        debug('Service index not found.');
    }
    
};

UcpController.prototype.requestMapping = function(service, from, fromEpid, fromOpts, toEpid, toOpts, cb) {
    var self = this;
    
    if ( self.peers[service] ) {
        var peer = self.peers[service];
       // console.log('in requestMapping', from, to, peer);
        self.ucp.rpc(peer, 'control.requestMapping', [from, fromEpid, fromOpts, toEpid, toOpts], function(err, data) {
           // console.log("requestMAP response was received from remote service...", err, data);
            cb(err, data);
        });
    } else {
        debug('Service index not found.');
    }
    
};

UcpController.prototype.model = function(service, cb) {
    var self = this;
    
    if ( self.peers[service] ) {
        var peer = self.peers[service];
        self.ucp.rpc(peer, 'control.model', [], function(err, data) {
            //console.log("B response was received from remote service...", data);
            cb(err, data);
        });
    } else {
        debug('Service index not found.');
    }
    
};

module.exports = {
    UcpController: UcpController };