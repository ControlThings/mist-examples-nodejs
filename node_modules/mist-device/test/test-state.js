var UcpDevice = require('../src/index.js').UcpDevice;
var DummyInterface = require('./utils/ucp-interface.js').DummyInterface;
var DummyDevice = require('./utils/ucp-dummy-device.js').DummyDevice;
var debug = require('debug')('tests');
var assert = require('assert');
var UcpFeature = require('../src/index.js').UcpFeature;

var setup = {};

function Dimmer() {
    var dummyDevice = new DummyDevice();
    this.ucp = new UcpDevice('TestDevice');

    var dimmer = new UcpFeature({
        type: 'uint16',
        label: 'Dimmer',
        unit: '%',
        scale: 0.1,
        data: 6,
        write: function(value, cb) {
            // change dimmer value
            dummyDevice.write('dimmer', value);
            cb(null);
        }
    });
    
    this.ucp.addFeature('dimmer', dimmer);
    this.ucp.addFeature('test', new UcpFeature({type:'test', label:'Test'}));
 
    dummyDevice.on('change', function(feature, value) {
        if (feature === 'dimmer') {
            dimmer.deviceUpdate(value);
        }
    });

    this.interface = new DummyInterface();
    this.ucp.attachInterface(this.interface);
}

describe('ucp-device', function() {

    var device = new Dimmer();

    xit('should write to the device without error', function(done) {
        var from = { url: 'from-url', epid: 'dimmer' };
        var to = { url: 'to-url', epid: 'to-epid' };
        var opts = {
            type: 'direct',
            interval: 'change' // change (O-MI -1) / interval (O-MI positive integer) / on-connect (O-MI -2)
        };
        var settings = {
            url: from.url,
            epid: from.epid,
            opts: opts
        };
        var key = 'kfi4k9ds23';

        device.interface.map(key, to.epid, settings, function (err, data) {
            if (err) {
                debug('Write test returned error');
                throw new Error('Failed writing');
            }
            device.ucp.serialize(function (err, data) {
                if (!err) {
                    device.ucp.saveMappings(data);
                }
            });
            

            var nd = new Dimmer();
            setTimeout(function () {
                nd.ucp.serialize(function (err, data) {
                    console.log("Serialized loaded state:", data);
                    done();
                });
            }, 200);
                
           
            //nd.ucp.deserialize(newFile);

            

            
        });
    });
});